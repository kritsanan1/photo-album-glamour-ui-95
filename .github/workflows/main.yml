
name: CI/CD Pipeline

on:
  push:
    branches: 
      - main        # Production deployment
      - develop     # Staging deployment
  pull_request:
    branches: 
      - main
      - develop
  workflow_dispatch:  # Manual trigger

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # ==========================================
  # BUILD AND TEST JOB
  # ==========================================
  test-and-build:
    name: üß™ Test, Lint & Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      build-artifact: ${{ steps.build.outputs.artifact-id }}
      coverage-report: ${{ steps.coverage.outputs.report-url }}
    
    steps:
      # Checkout code
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better coverage analysis
      
      # Setup Node.js with caching
      - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      # Cache node_modules for faster builds
      - name: üì¶ Cache node_modules
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-
      
      # Install dependencies
      - name: üì• Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit
      
      # Lint code
      - name: üîç Run ESLint
        run: npm run lint
        continue-on-error: false
      
      # Type checking
      - name: üîß TypeScript type check
        run: npx tsc --noEmit
        continue-on-error: false
      
      # Run unit tests with coverage
      - name: üß™ Run tests with coverage
        run: npm run test:coverage
        env:
          CI: true
          NODE_ENV: test
      
      # Upload coverage to Codecov
      - name: üìä Upload coverage to Codecov
        id: coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        continue-on-error: true
      
      # Build application
      - name: üèóÔ∏è Build application
        id: build
        run: |
          npm run build
          echo "Build completed successfully"
          echo "artifact-id=build-${{ github.sha }}" >> $GITHUB_OUTPUT
        env:
          NODE_ENV: production
      
      # Upload build artifacts
      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 30
      
      # Notify Slack on failure
      - name: üì¢ Notify Slack on build failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            üö® Build failed for ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==========================================
  # STAGING DEPLOYMENT JOB
  # ==========================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: test-and-build
    timeout-minutes: 20
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.environment-url }}
    
    steps:
      # Checkout code
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      # Download build artifacts
      - name: üì• Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: .
      
      # Setup Node.js
      - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      # Install EB CLI
      - name: üîß Install EB CLI
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli
      
      # Configure AWS credentials
      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      # Deploy to staging
      - name: üöÄ Deploy to Elastic Beanstalk Staging
        id: deploy
        run: |
          # Initialize EB if needed
          if [ ! -f .elasticbeanstalk/config.yml ]; then
            eb init ${{ vars.APP_NAME }} --region us-east-1 --platform "Node.js 18 running on 64bit Amazon Linux 2"
          fi
          
          # Deploy to staging environment
          eb deploy ${{ vars.EB_ENVIRONMENT_NAME_STAGING }} --timeout 20
          
          # Get environment URL
          ENV_URL=$(eb status ${{ vars.EB_ENVIRONMENT_NAME_STAGING }} | grep CNAME | awk '{print $2}')
          echo "environment-url=https://$ENV_URL" >> $GITHUB_OUTPUT
        env:
          NODE_ENV: staging
      
      # Health check
      - name: üè• Health check
        run: |
          sleep 30  # Wait for deployment to stabilize
          curl -f ${{ steps.deploy.outputs.environment-url }}/health || exit 1
        continue-on-error: true
      
      # Notify Slack on success
      - name: üì¢ Notify Slack on staging deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            ‚úÖ Successfully deployed to staging!
            Environment: ${{ steps.deploy.outputs.environment-url }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      # Rollback on failure
      - name: üîÑ Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, attempting rollback..."
          eb abort ${{ vars.EB_ENVIRONMENT_NAME_STAGING }} || true
        continue-on-error: true
      
      # Notify Slack on failure
      - name: üì¢ Notify Slack on staging failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            üö® Staging deployment failed for ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Rollback attempted.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==========================================
  # PRODUCTION DEPLOYMENT JOB
  # ==========================================
  deploy-production:
    name: üéØ Deploy to Production
    runs-on: ubuntu-latest
    needs: test-and-build
    timeout-minutes: 30
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.environment-url }}
    
    steps:
      # Checkout code
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      # Download build artifacts
      - name: üì• Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: .
      
      # Setup Node.js
      - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      # Install EB CLI
      - name: üîß Install EB CLI
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli
      
      # Configure AWS credentials
      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      # Create deployment snapshot
      - name: üì∏ Create deployment snapshot
        run: |
          CURRENT_VERSION=$(eb status ${{ vars.EB_ENVIRONMENT_NAME_PRODUCTION }} | grep "Deployed Version" | awk '{print $3}')
          echo "ROLLBACK_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
      
      # Deploy to production
      - name: üéØ Deploy to Elastic Beanstalk Production
        id: deploy
        run: |
          # Initialize EB if needed
          if [ ! -f .elasticbeanstalk/config.yml ]; then
            eb init ${{ vars.APP_NAME }} --region us-east-1 --platform "Node.js 18 running on 64bit Amazon Linux 2"
          fi
          
          # Deploy to production environment
          eb deploy ${{ vars.EB_ENVIRONMENT_NAME_PRODUCTION }} --timeout 25
          
          # Get environment URL
          ENV_URL=$(eb status ${{ vars.EB_ENVIRONMENT_NAME_PRODUCTION }} | grep CNAME | awk '{print $2}')
          echo "environment-url=https://$ENV_URL" >> $GITHUB_OUTPUT
        env:
          NODE_ENV: production
      
      # Comprehensive health check
      - name: üè• Production health check
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 60
          
          # Multiple health check endpoints
          curl -f ${{ steps.deploy.outputs.environment-url }}/health || exit 1
          curl -f ${{ steps.deploy.outputs.environment-url }}/ || exit 1
          
          echo "Production deployment health check passed!"
      
      # Notify Slack on success
      - name: üì¢ Notify Slack on production deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            üéâ Production deployment successful! 
            Environment: ${{ steps.deploy.outputs.environment-url }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Coverage: ${{ needs.test-and-build.outputs.coverage-report }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      # Rollback on failure
      - name: üîÑ Emergency rollback
        if: failure() && env.ROLLBACK_VERSION != ''
        run: |
          echo "Production deployment failed! Rolling back to version: $ROLLBACK_VERSION"
          eb deploy ${{ vars.EB_ENVIRONMENT_NAME_PRODUCTION }} --version=$ROLLBACK_VERSION --timeout 15
        continue-on-error: true
      
      # Notify Slack on failure
      - name: üì¢ Notify Slack on production failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            üö® CRITICAL: Production deployment failed!
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Rollback attempted to: ${{ env.ROLLBACK_VERSION }}
            @channel Please investigate immediately!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==========================================
  # CLEANUP JOB
  # ==========================================
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [test-and-build, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: üóëÔ∏è Clean up old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const oldArtifacts = artifacts.data.artifacts
              .filter(artifact => {
                const age = Date.now() - new Date(artifact.created_at).getTime();
                return age > 7 * 24 * 60 * 60 * 1000; // 7 days
              });
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
